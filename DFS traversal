#include <stdio.h>
#include <stdlib.h>

struct node 
{
    int data;
    struct node* left;
    struct node* right;
};

struct node* create(int value) 
{
    struct node* new_node = (struct node*) malloc(sizeof(struct node));
    new_node->data = value;
    new_node->left = NULL;
    new_node->right = NULL;
    
    return new_node;
}

struct node* insert(struct node* root, int value) 
{
    if (root == NULL) 
    {
        return create(value);
    }
    struct node* current = root;
    while (current != NULL) 
    {
        if (value > current->data) 
        {
            if (current->right == NULL) 
            {
                current->right = create(value);
                break;
            }
            current = current->right;
        } 
        else if (value < current->data) 
        {
            if (current->left == NULL) 
            {
                current->left = create(value);
                break;
            }
            current = current->left;
        }
    }
    
    return root;
}

void dfs_preorder(struct node* root) 
{
    if (root == NULL) 
    {
        return;
    }
    printf("%d ", root->data);
    dfs_preorder(root->left);
    dfs_preorder(root->right);
}

void dfs_inorder(struct node* root) 
{
    if (root == NULL) 
    {
        return;
    }
    dfs_inorder(root->left);
    printf("%d ", root->data);
    dfs_inorder(root->right);
}

void dfs_postorder(struct node* root) 
{
    if (root == NULL) 
    {
        return;
    }
    dfs_postorder(root->left);
    dfs_postorder(root->right);
    printf("%d ", root->data);
}

int main() 
{
    struct node* root = NULL;
    int n, value;
    printf("Enter number of nodes: ");
    scanf("%d", &n);
    printf("Enter values:\n");
    for (int i = 0; i < n; i++) 
    {
        scanf("%d", &value);
        root = insert(root, value);
    }
    
    printf("DFS Preorder:\n");
    dfs_preorder(root);
    printf("\nDFS Inorder:\n");
    dfs_inorder(root);
    printf("\nDFS Postorder:\n");
    dfs_postorder(root);
    
    return 0;
}
